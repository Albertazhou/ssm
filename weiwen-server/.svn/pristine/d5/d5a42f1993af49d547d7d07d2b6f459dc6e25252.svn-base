package com.cetc.weiwen.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.cetc.weiwen.commons.utils.ListToTreeUtil;
import com.cetc.weiwen.entity.Organization;
import com.cetc.weiwen.entity.Position;
import com.cetc.weiwen.result.Result;
import com.cetc.weiwen.service.DivisionService;
import com.cetc.weiwen.service.FunctionTypeService;
import com.cetc.weiwen.service.OrganizationService;
import com.cetc.weiwen.vo.OrganizationDivisionVo;


/**
 * @author zhou
 *
 */
@RestController
@RequestMapping("/organization")
public class OrganizationController {
	
	@Autowired
	private OrganizationService organizationService;
	
	@Autowired
	private DivisionService divisionService;
	
	@Autowired 
	private FunctionTypeService functionTypeService;
	
	/**
	 * 
	 * @return
	 
	@GetMapping(value="/getlist",produces = {"application/json;charset=UTF-8" })
	public Result<List<Organization>> getOrganizationList(){
		List<Organization> organizationList=organizationService.getOrganizationList();
		return Result.success(organizationList);
	}
	*/
	
	//获取所有组织（树形结构）
//	@GetMapping(produces = {"application/json;charset=UTF-8" })
//	public Result<JSONArray> getOrganizationInfoList(){
//		List<OrganizationDivisionVo> organizationList=organizationService.getOrganizationDivisionList();
//		//将list转化为树形
//		 JSONArray orgTree = ListToTreeUtil.listToTree(JSONArray.parseArray(JSON.toJSONString(organizationList)),"uuid","parentId","children");
//		System.out.println(orgTree+"zhou");
//		 return Result.success(orgTree);
//	}
	
	/**
	 * 获取组织下的所有职位
	 * @param orgUuid
	 * @return
	 
	@GetMapping(value = "/position", produces = { "application/json;charset=UTF-8" })
	public Result<List<Position>> getOraganizationPosition(@RequestParam(name = "orgUuid", required = true) String orgUuid){
		List<Position> postionList=organizationService.findPositionByOrgUuid(orgUuid);
		return Result.success(postionList);
	}
	*/
		
	//根据组织的id和组织的path获取该组织下的所有组织
//	@GetMapping(value="/getOrgByPath",produces = {"application/json;charset=UTF-8" })
	/**
	 * 
	 * @param id
	 * @param path
	 * @return
	 
	public Result<List<OrganizationDivisionVo>> getOrgByPath(@RequestParam(name = "orgId", required = true) Integer id,
			@RequestParam(name = "path", required = true) String path ){
		Organization organization=new Organization();
		organization.setId(id);
		organization.setPath(path);
		List<OrganizationDivisionVo> organizationList=organizationService.getOrgByPath(organization);
		return Result.success(organizationList);
	}
	*/
	
	
	/**
	 * 新增组织
	 * @param organization
	 * @return
	 
	@PostMapping(produces = {"application/json;charset=UTF-8" })
	public Result<String> addOrganization(@RequestBody Organization organization){
		Organization isSucess;
		if((organizationService.isExit(organization.getParentId())||organization.getParentId().equals("0"))
				&&divisionService.isExitDivision(organization.getDivisionId())
				&&functionTypeService.isExit(organization.getFunctionTypeId())) {
			 isSucess=organizationService.insertOrganization(organization);
		}else {
			return Result.errorMsg("添加组织相关的信息不正确");
		}
			
		if(isSucess!=null) {
			return Result.success("添加组织成功");
		}else {
			return Result.success("添加组织失败");
		}
		
	}
	*/
	
	/**
	 * 修改组织
	 * @param organization
	 * @return
	 
	@PutMapping(produces = {"application/json;charset=UTF-8" })
	public Result<String> updateOrganization(@RequestBody Organization organization){
		if(!organizationService.isExit(organization.getUuid())) {
			return Result.errorMsg("该组织不存在");
		}
		int isSucess=organizationService.updateOrganizationByUuid(organization);
		if(isSucess==1) {
			return Result.success("修改组织成功");
		}else {
			return Result.success("修改组织失败");
		}
	}
	*/
	
	/**
	 * 
	 * @param orgUuid
	 * @return
	 
	//删除一个组织
	@DeleteMapping(produces = {"application/json;charset=UTF-8" })
	public Result<String> deleteOrganization(@RequestParam(name = "orgUuid", required = true) String orgUuid){
		if(!organizationService.isExit(orgUuid)) {
			return Result.errorMsg("该组织不存在");
		}
		int isSucess=organizationService.deleteByUuid(orgUuid);
		if(isSucess>0) {
			return Result.success("删除组织成功");
		}else {
			return Result.success("删除组织失败");
		}
	}
	*/
	 
}
